from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from keyboards.user_keyboards import create_subscription_keyboard, check_user_subscription
from keyboards.user_keyboards import main,create_faculty_url,create_subscription_keyboard
from create_bot import bot
from dotenv import load_dotenv

load_dotenv()

start_router = Router()

async def start_handler(message: Message, db):
    user = message.from_user
    faculty = ['Gryffindor', 'Hufflepuff', 'Ravenclaw', 'Slytherin']
    index = await db.get_users_count() + 1
    faculty_value = faculty[index % 4]
    await db.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        language_code=user.language_code,
        faculty=faculty_value
    )
    await db.add_message(
        user_id=user.id,
        message_id=message.message_id,
        text=message.text
    )

# –ö–æ–º–∞–Ω–¥–∞ /start - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
@start_router.message(Command("start"))
async def start_command(message: Message):
    text = (
        "üëã Hush kelibsiz!\n\n"
        "Botdan foydalanish uchun kanalimizga obuna bo'lishingiz kerak..\n"
        "Obuna bo'lgandan so'ng, 'Obunani tekshirish' tugmasini bosing'."
    )
    await message.answer(
        text=text,
        reply_markup=await create_subscription_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@start_router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    is_subscribed = await check_user_subscription(bot, user_id)

    if is_subscribed:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback_query.message.edit_text(
            "‚úÖ Ajoyib! Siz kanalga obuna bo'ldingiz.\n"
            "Endi siz botdan foydalanishingiz mumkin!",
            reply_markup=None
        )
        await callback_query.message.answer(
            "üéâ Xush kelibsiz! Amalni tanlang:",
            reply_markup=main
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await callback_query.answer(
            "‚ùå Siz kanalga obuna bo'lmagansiz! Iltimos, obuna bo'ling va qayta urinib ko'ring.",
            show_alert=True
        )

    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@start_router.message(F.text == "üéÆ O\'yinlar")
async def main_menu(message: Message, **data):
    await message.delete()
    db = data["db"]
    user = await db.get_user(message.from_user.id)
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await check_user_subscription(bot, message.from_user.id):
        await message.answer(
            "‚ùå Kirish cheklangan! Kanalga obuna bo'ling:",
            reply_markup=await create_subscription_keyboard()
        )
        return

    await message.answer("O‚Äòyinlar bo‚Äòlimiga xush kelibsiz!", reply_markup=await create_faculty_url(user.get("faculty", "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")))

@start_router.callback_query(F.data == "settings")
async def settings_menu(message: Message):
    await message.delete()
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await check_user_subscription(bot, message.from_user.id):
        await message.answer(
            "‚ùå Kirish cheklangan! Kanalga obuna bo'ling:",
            reply_markup=await create_subscription_keyboard()
        )
        return

    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞...")


@start_router.callback_query(F.data == "help")
async def support_menu(message: Message):
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await check_user_subscription(bot, message.from_user.id):
        await message.answer(
            "‚ùå Kirish cheklangan! Kanalga obuna bo'ling:",
            reply_markup=await create_subscription_keyboard()
        )
        return

    await message.answer("Yordam ahahahahah")


@start_router.callback_query(F.data == 'faculty')
async def get_faculty(callback: CallbackQuery, **data):
    await callback.answer('–í—ã —É–∑–Ω–∞–µ—Ç–µ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç!')
    db = data["db"]
    user = await db.get_user(callback.message.from_user.id)
    if not user:
        await start_handler(callback.message, db)
        user = await db.get_user(callback.message.from_user.id)
    if user:
        await callback.message.answer(f'–í–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {user.get("faculty", "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")}', reply_markup=main)
    else:
        await callback.message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
    # –ó–∞—â–∏—Ç–∞: –µ—Å–ª–∏ faculty –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ä–∞–≤–µ–Ω None, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
    if user and ("faculty" not in user or user["faculty"] is None):
        faculty = ['Gryffindor', 'Hufflepuff', 'Ravenclaw', 'Slytherin']
        index = await db.get_users_count()
        faculty_value = faculty[index % 4]
        await db.add_user(
            user_id=callback.message.from_user.id,
            username=callback.message.from_user.username,
            first_name=callback.message.from_user.first_name,
            last_name=callback.message.from_user.last_name,
            is_bot=callback.message.from_user.is_bot,
            language_code=callback.message.from_user.language_code,
            faculty=faculty_value
        )
        user = await db.get_user(callback.message.from_user.id)


@start_router.callback_query(F.data == 'rating')
async def get_rating(callback: CallbackQuery, **data):
    await callback.answer('–í—ã —É–∑–Ω–∞–µ—Ç–µ —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥!')
    db = data["db"]
    user = await db.get_user(callback.message.from_user.id)
    if not user:
        await start_handler(callback.message, db)
        user = await db.get_user(callback.message.from_user.id)
    if user:
        await callback.message.answer(f'–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {user.get("rating", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")}')
    else:
        await callback.message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')


@start_router.callback_query(F.data == 'get_info')
async def get_info(callback: CallbackQuery, **data):
    await callback.answer('–í—ã —É–∑–Ω–∞–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ!')
    db = data["db"]
    user = await db.get_user(callback.message.from_user.id)
    if not user:
        await start_handler(callback.message, db)
        user = await db.get_user(callback.message.from_user.id)
    if user:
        await callback.message.answer('–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞. –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞ –æ–¥–∏–Ω –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤: Gryffindor, Hufflepuff, Ravenclaw –∏–ª–∏ Slytherin. –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∏–≥—Ä–∞—Ö –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!')
    else:
        await callback.message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')